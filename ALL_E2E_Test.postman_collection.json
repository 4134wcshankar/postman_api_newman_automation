{
	"info": {
		"_postman_id": "816dcae8-cdc3-4d53-809a-819511aa79a5",
		"name": "ALL_E2E_Test",
		"description": "> This collection features end-to-end tests that ensure the Intergalactic Bank API components function in an expected sequence. Check out the [Functional testing collection](https://www.postman.com/templates/f26ad070-d626-4d75-b151-7cbf1a48ed11/Functional-testing) and [Integration testing collection](https://www.postman.com/templates/6f788c17-067a-4074-a528-d07df1df9529/Integration-testing-%23example) for other test cases for this API. \n  \n\n## **ü™ê Get started**\n\nThe fictional Intergalactic Bank Services team is responsible for testing the end-to-end workflows in this collection. You can use this collection to validate specific workflows for your team or figure out ways to increase your test coverage and make your applications more resilient.\n\nTo test the Intergalactic Bank API, you can:\n\n1. **Review tests and scripts:** Check out the [tests](https://learning.postman.com/docs/writing-scripts/test-scripts/) in the Scripts tab of a collection, folder, or request. You‚Äôll also find additional steps in the Pre-request Script, such as for passing data between requests or building up POST request payloads.\n    \n2. **Run tests:** To run the collection, select Run collection from the collection menu. If you are interested in testing one of the use cases, select Run folder from the use case folder menu. Keep in mind that many of these tests contain logic that passes information between requests, and they are meant to be run in order from top to bottom. If you send the requests manually or out of order, your results may vary.\n    \n3. **Review test results:** Many of the test cases contain error messages to help debug service errors. If you‚Äôre using this collection as a pre-merge check, ensure that all tests are passing before submitting (and no, deleting the failing test cases isn‚Äôt an option üòâ).\n    \n\nCheck out the additional sections below or select View complete documentation. For context-sensitive help with a folder or request, look for the documentation icon.\n\n## üßë‚ÄçüíªHow your team can use this collection\n\n- **Add a mock server to speed up development:** Adding functionality to this service? Since this collection has example responses, you can add a mock server that will return the expected results. Start writing tests against the mock, and once your additions are live, you can swap out the URLs and have a live test suite.\n    \n- **Integrate tests with your CI/CD pipeline:** This comprehensive test suite is a great addition to your existing CI/CD pipeline. Generate the Postman CLI command from the Collection Runner and add this step to your existing checks each time you make a commit affecting this service.\n    \n- **Add a monitor:** If your team is contributing to or relying on this service, it‚Äôs a good idea to keep tabs on the status. Adding a monitor to this collection can give you confidence that the service is up and running and alert you to any breaking changes that may have occurred.\n    \n\n## üîç What we‚Äôre testing\n\n- A very common workflow is the transfer of funds between accounts. We have two scenarios: one which creates all resources and successfully transfers funds, and one which tries the transfer with insufficient funds.\n    \n- During these workflows, we are testing for data correctness, data types, and that data is successfully passed through the system during creation and retrieval.\n    \n\n## üîíA note on authorization\n\nThis API uses an API key-based authorization. In this collection, we set the authorization at the collection level and generate a new API Key for each test run.\n\n## üëÄ View and share run results\n\nInterested in seeing previous run results? We‚Äôre happy to share, and have a few ways for you to stay in the loop:\n\n- **Runs tab:** View past collection runs in the `Runs` tab of this collection. Here, you can see the results of past runs, including who ran them and whether it was via the Collection Runner or the CLI. You can also share individual run reports from this page.\n    \n- **Monitors:** If you have a monitor set up for this collection, you can see historical run information when you select the Monitors tab in the left sidebar. You can also have the results sent to Slack or other services when you set up a corresponding integration.\n    \n\n### ü§ùIncrease test coverage\n\nThe Intergalactic Bank Services team wants your team to have everything they need to successfully test our services with their applications. Is your team utilizing this API in a use case not represented here? Reach out to us on our internal Slack by tagging `@bank-services`. Or add an [inline comment](https://learning.postman.com/docs/collaborating-in-postman/working-with-your-team/discussing-your-work/) to this collection with your test case suggestions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11681938"
	},
	"item": [
		{
			"name": "httpbin_test_E2E",
			"item": [
				{
					"name": "GET Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to check if the status in the response is 'OK'",
									"pm.test(\"Status in the response is 'OK'\", function () {",
									"    // pm.expect(pm.response.json().headers['Status']).to.equal('OK');",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"// Test to check if the response body contains the required properties",
									"pm.test(\"Response body contains args, headers, origin, and url properties\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('args');",
									"    pm.expect(pm.response.json()).to.have.property('headers');",
									"    pm.expect(pm.response.json()).to.have.property('origin');",
									"    pm.expect(pm.response.json()).to.have.property('url');",
									"});",
									"",
									"// Test to check if the headers object contains specific properties",
									"pm.test(\"Headers object contains Accept, Accept-Encoding, Api-Key, Host, Postman-Token, User-Agent, and X-Amzn-Trace-Id properties\", function () {",
									"    var headers = pm.response.json().headers;",
									"    pm.expect(headers).to.have.property('Accept');",
									"    pm.expect(headers).to.have.property('Accept-Encoding');",
									"    pm.expect(headers).to.have.property('Host');",
									"    pm.expect(headers).to.have.property('Postman-Token');",
									"    pm.expect(headers).to.have.property('User-Agent');",
									"    pm.expect(headers).to.have.property('X-Amzn-Trace-Id');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{httpbin_baseUrl}}/get",
							"host": [
								"{{httpbin_baseUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);",
									"});",
									"",
									"// pm.test(\"Validate response JSON schema\", function () {",
									"//     const responseData = pm.response.json();",
									"//     const expectedSchema = {",
									"//         \"args\": {},",
									"//         \"data\": \"\",",
									"//         \"files\": {},",
									"//         \"form\": {},",
									"//         \"headers\": {",
									"//             \"Accept\": responseData.headers.Accept,",
									"//             \"Accept-Encoding\": responseData.headers['Accept-Encoding'],",
									"            ",
									"//             \"Content-Length\": responseData.headers['Content-Length'],",
									"//             \"Host\": responseData.headers.Host,",
									"//             \"Postman-Token\": responseData.headers['Postman-Token'],",
									"//             \"User-Agent\": responseData.headers['User-Agent'],",
									"//             \"X-Amzn-Trace-Id\": responseData.headers['X-Amzn-Trace-Id']",
									"//         },",
									"//         \"json\": null,",
									"//         \"origin\": responseData.origin,",
									"//         \"url\": responseData.url",
									"//     };",
									"//     pm.expect(responseData).to.eql(expectedSchema);",
									"// });",
									"",
									"pm.test(\"Headers contain the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.headers).to.be.an('object');",
									"    pm.expect(responseData.headers).to.include.all.keys('Accept', 'Accept-Encoding', 'Content-Length', 'Host', 'Postman-Token', 'User-Agent', 'X-Amzn-Trace-Id');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{httpbin_baseUrl}}/post",
							"host": [
								"{{httpbin_baseUrl}}"
							],
							"path": [
								"post"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \"https://httpbin.org/patch\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "PATCH Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the response time is less than 200ms",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response body has the required keys\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('args', 'data', 'files', 'form', 'headers', 'json', 'origin', 'url');",
									"});",
									"",
									"",
									"pm.test(\"Response headers contain the required keys\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.headers).to.include.all.keys('Accept', 'Accept-Encoding', 'Content-Length', 'Host', 'Postman-Token', 'User-Agent', 'X-Amzn-Trace-Id');",
									"});",
									"",
									"",
									"pm.test(\"Response body keys have the expected data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.args).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.a('string');",
									"    pm.expect(responseData.files).to.be.an('object');",
									"    pm.expect(responseData.form).to.be.an('object');",
									"    pm.expect(responseData.headers).to.be.an('object');",
									"    pm.expect(responseData.json).to.be.null;",
									"    pm.expect(responseData.origin).to.be.a('string');",
									"    pm.expect(responseData.url).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response headers contain non-empty values for each key except Api-Key\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.headers).to.be.an('object');",
									"    Object.keys(responseData.headers).forEach(function(key) {",
									"        if (key !== 'Api-Key') {",
									"            pm.expect(responseData.headers[key]).to.exist.and.to.not.be.empty;",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Accept header in the response matches the expected value 'application/json'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.headers.Accept).to.equal(\"application/json\");",
									"});",
									"",
									"// Test to check if the response has a valid content type header",
									"pm.test(\"Response has a valid content type header\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{httpbin_baseUrl}}/patch",
							"host": [
								"{{httpbin_baseUrl}}"
							],
							"path": [
								"patch"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \"https://httpbin.org/patch\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "PUT Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Headers contain all the required keys\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.headers).to.include.all.keys(",
									"        \"Accept\",",
									"        \"Accept-Encoding\",",
									"        ",
									"        \"Content-Length\",",
									"        \"Host\",",
									"        \"Postman-Token\",",
									"        \"User-Agent\",",
									"        \"X-Amzn-Trace-Id\"",
									"    );",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence of specific fields in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('args', 'data', 'files', 'form', 'json', 'origin', 'url');",
									"});",
									"",
									"",
									"pm.test(\"Origin and url fields are in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('origin').that.is.a('string').and.not.empty;",
									"    pm.expect(responseData).to.have.property('url').that.is.a('string').and.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{httpbin_baseUrl}}/put",
							"host": [
								"{{httpbin_baseUrl}}"
							],
							"path": [
								"put"
							]
						},
						"description": "Generated from cURL: curl -X PUT \"https://httpbin.org/put\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "https://httpbin.org/delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{httpbin_baseUrl}}/delete",
							"host": [
								"{{httpbin_baseUrl}}"
							],
							"path": [
								"delete"
							]
						},
						"description": "Generated from cURL: curl -X DELETE \"https://httpbin.org/delete\" -H \"accept: application/json\""
					},
					"response": []
				}
			]
		},
		{
			"name": "Petstore_API",
			"item": [
				{
					"name": "Petstore_Login",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/login?username=sankar&password=Test%40123456",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "sankar"
								},
								{
									"key": "password",
									"value": "Test%40123456"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://petstore.swagger.io/v2/user/login?username=sankar&password=Test%40123456' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "findByStatus_By_available_pending_sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Commented out the code with syntax errors",
									"pm.test(\"Response has content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Status is one of the expected values - available, pending, or sold\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(pet) {",
									"        pm.expect(pet.status).to.be.oneOf(['available', 'pending', 'sold']);",
									"        ",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test for the overall structure (array)",
									"pm.test(\"Response should be an array\", () => {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Define the keys to check",
									"const topLevelKeys = [\"id\", \"category\", \"name\", \"photoUrls\", \"tags\", \"status\"];",
									"const categoryKeys = [\"id\", \"name\"];",
									"const tagKeys = [\"id\", \"name\"];",
									"",
									"// Loop 1: Iterate through the first 3 items of the main array (if they exist)",
									"for (let i = 0; i < Math.min(3, jsonData.length); i++) {",
									"    const item = jsonData[i];",
									"",
									"    pm.test(`Object at index ${i} should have all top-level properties`, () => {",
									"        topLevelKeys.forEach(key => {",
									"            pm.expect(item).to.have.property(key);",
									"        });",
									"    });",
									"",
									"    pm.test(`Object at index ${i} should have a 'category' property that is an object and not null`, () => {",
									"        pm.expect(item).to.have.property('category').that.is.an('object').that.is.not.null;",
									"    });",
									"",
									"    pm.test(`Object at index ${i}'s 'category' should have all required properties`, () => {",
									"        categoryKeys.forEach(key => {",
									"            pm.expect(item.category).to.have.property(key);",
									"        });",
									"    });",
									"",
									"    pm.test(`Object at index ${i} should have a 'photoUrls' property that is an array`, () => {",
									"        pm.expect(item).to.have.property('photoUrls').that.is.an('array');",
									"    });",
									"",
									"    pm.test(`Object at index ${i} should have a 'tags' property that is an array`, () => {",
									"        pm.expect(item).to.have.property('tags').that.is.an('array');",
									"    });",
									"",
									"    // Loop 2: Iterate through the first 3 tags of the current item (if they exist)",
									"    for (let j = 0; j < Math.min(3, item.tags.length); j++) {",
									"        const tag = item.tags[j];",
									"        pm.test(`Object at index ${i}, tag at index ${j} should have all required properties`, () => {",
									"            tagKeys.forEach(key => {",
									"                pm.expect(tag).to.have.property(key);",
									"            });",
									"        });",
									"    }",
									"}",
									"",
									"// Loop 3: Iterate through the category keys (this loop is not dependent on the JSON structure length)",
									"pm.test(\"Check all category keys exist in the defined array\", () => {",
									"    categoryKeys.forEach(key => {",
									"        // This test doesn't directly assert against the JSON,",
									"        // but confirms our list of category keys is as expected.",
									"        pm.expect(categoryKeys).to.include(key);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://petstore.swagger.io/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
							},
							{
								"key": "Referer",
								"value": ""
							},
							{
								"key": "api_key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{petstore_base_url}}/findByStatus?status=available&status=pending&status=sold",
							"host": [
								"{{petstore_base_url}}"
							],
							"path": [
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								},
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "status",
									"value": "sold"
								}
							]
						},
						"description": "Generated from cURL: curl 'https://petstore.swagger.io/v2/pet/findByStatus?status=available&status=pending&status=sold' \\\n  -H 'accept: application/json' \\\n  -H 'accept-language: en-US,en;q=0.9' \\\n  -b 'userId=64046491744640077422; _ga=GA1.1.1383748077.1744640078; JSESSIONID=1qs29x4v2pnnc15x5lbx4wk7hj; cookiehub=eyJhbnN3ZXJlZCI6dHJ1ZSwicmV2aXNpb24iOjEsImRudCI6ZmFsc2UsImFsbG93U2FsZSI6dHJ1ZSwiaW1wbGljdCI6ZmFsc2UsInJlZ2lvbiI6IlVTIiwidG9rZW4iOiIyanRJVmZkTWhFdFVzWkxxUW5tTFlxMHdYcEc2NnVWN3hXUjQxU3J6ZFBlejV4VUVCVTNLS2NidmV3VDR0clRtIiwidGltZXN0YW1wIjoiMjAyNS0wNC0xNFQxNzoyOToxMC42OTRaIiwiYWxsQWxsb3dlZCI6dHJ1ZSwiY2F0ZWdvcmllcyI6W10sInZlbmRvcnMiOltdLCJzZXJ2aWNlcyI6W119; _ga_F11FV1HQ2E=GS1.1.1744651292.3.1.1744653615.0.0.0' \\\n  -H 'priority: u=1, i' \\\n  -H 'referer: https://petstore.swagger.io/' \\\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  -H 'sec-fetch-dest: empty' \\\n  -H 'sec-fetch-mode: cors' \\\n  -H 'sec-fetch-site: same-origin' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36' ;\ncurl 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"15\" aria-hidden=\"true\"><path fill=\"%23fff\" fill-rule=\"evenodd\" d=\"M4 12h4v1H4zm5-6H4v1h5zm2 3V7l-3 3 3 3v-2h5V9zM6.5 8H4v1h2.5zM4 11h2.5v-1H4zm9 1h1v2c-.02.28-.11.52-.3.7s-.42.28-.7.3H3c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3c0-1.11.89-2 2-2s2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V5H3v9h10zM4 4h8c0-.55-.45-1-1-1h-1c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H5c-.55 0-1 .45-1 1\"/></svg>' -H 'Referer;'"
					},
					"response": []
				},
				{
					"name": "https://petstore.swagger.io/v2/pet/5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the response status code",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response body structure and values",
									"pm.test(\"Response body structure is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('id');",
									"    pm.expect(responseJSON).to.have.property('category');",
									"    pm.expect(responseJSON).to.have.property('name');",
									"    pm.expect(responseJSON).to.have.property('photoUrls');",
									"    pm.expect(responseJSON).to.have.property('tags');",
									"    pm.expect(responseJSON).to.have.property('status');",
									"});",
									"",
									"// Test to check if the response contains a Content-Type header",
									"pm.test(\"Valid Content-Type header is present\", function() {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Status in the response is 'OK'\", function () {",
									"    // pm.expect(pm.response.json().headers['Status']).to.equal('OK');",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{petstore_base_url}}/5",
							"host": [
								"{{petstore_base_url}}"
							],
							"path": [
								"5"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://petstore.swagger.io/v2/pet/5' \\\n  -H 'accept: application/json'"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "httpbin_baseUrl",
			"value": "https://httpbin.org/",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "OMpqVWAH.UC80wyXTtPwhDgAUdCTx6"
		},
		{
			"key": "petstore_base_url",
			"value": "https://petstore.swagger.io/v2/pet",
			"type": "string"
		},
		{
			"key": "user_name",
			"value": "sankar",
			"type": "string"
		},
		{
			"key": "pass",
			"value": "Test%40123456",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "a5a19c0e-fb43-459e-8d89-a0a6bc8e807a",
			"type": "string"
		}
	]
}